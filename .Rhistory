sdasd
install.packages("BiocManager")
---
title: "Module 2 Homework"
author: "Orhun Kok"
date: "9/15/2020"
output: html_document
---
BiocManager::install('multtest')
BiocManager::install('multtest')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install('multtest')
library(BiocManager)
library(BiocManager,multtest)
data(golub)
library(BiocManager,multtest)
BiocManager::install('multtest')
library(BiocManager,multtest)
data(golub)
library(BiocManager,multtest)
BiocManager::install('multtest')
library(BiocManager,multtest)
library(BiocManager,multtest)
data(golub)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install('multtest')
library(BiocManager,multtest)
data(golub)
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocManager,multtest,biocLite)
data(golub)
biocLite()
source("http://www.bioconductor.org/biocLite.R")
biocLite()
source("http://www.bioconductor.org/biocLite.R")
library("BiocManager","multtest","biocLite")
biocLite()
data(golub)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install('multtest')
library(asdasd)
library(BiocManager,multtest)
data(golub)
data(Golub)
data()
data(package = .packages(all.available = TRUE))
data(golub)
library(BiocManager)
library(multtest)
data(golub)
str(golub)
gol.fac <- factor(golub.cl,levels = 0:1, labels = c("ALL","AML"))
gol.fac
golub[1042,gol.fac=="ALL"]
View(golub)
View(golub)
meanAll <- apply(golub[,gol.fac == "ALL"], 1, mean)
?apply
meanAll <- apply(golub[,gol.fac == "ALL"], 1, mean)
meanALL <- apply(golub[,gol.fac == "ALL"], 1, mean)
meanAML <- apply(golub[,gol.fac == "ALL"], 1, mean)
meanAML <- apply(golub[,gol.fac == "AML"], 1, mean)
summary(meanALL)
head(meanALL)
max(meanALL)
# Finding the three genes with largest mean expression for ALL and ALL patients
order(meanAll, decreasin = TRUE)
# Finding the three genes with largest mean expression for ALL and ALL patients
order(meanAll, decreasing = TRUE)
head(meanALL)
# Finding the three genes with largest mean expression for ALL and ALL patients
order(meanAll, increasing = TRUE)
# Finding the three genes with largest mean expression for ALL and ALL patients
order(meanAll, decreasing = FALSE)
head(meanALL)
# Finding the three genes with largest mean expression for ALL and ALL patients
decreasingMeanALL <- order(meanAll, decreasing = TRUE)
head(decreasingMeanALL)
view(decreasingMeanALL)
desc(meanALL)
decreasingMeanALL
head(meanALL)
# Finding the three genes with largest mean expression for ALL and ALL patients
decreasingMeanALL <- order(-meanALL)
decreasingMeanALL
decreasingMeanALL[1]
decreasingMeanALL[1:#]
decreasingMeanALL[1:3]
# Finding the three genes with largest mean expression for ALL and ALL patients
decreasingMeanALL <- order(-meanALL)
decreasingMeanALL[1:3]
decreasingMeanALL[1:10]
View(golub.gnames)
data.frame(meanALL)
view(meanALL)
View(meanALL)
View(decreasingMeanALL)
# Finding the three genes with largest mean expression for ALL and ALL patients
decreasingMeanALL <- order(-V1)
head(meanALL)
install.packages(dplyr)
install.packages("dplyr")
install.packages("tinyverse")
library(dplyr)
desc(meanALL)
decreasingMeanALL <- desc(meanALL)
decreasingMeanALL
is.numeric(meanALL)
as.numeric(meanALL)
decreasingMeanALL <- desc(meanALL)
View(decreasingMeanALL)
# Finding the three genes with largest mean expression for ALL and ALL patients
decreasingMeanALL <- order(abs(meanALL), decreasing = TRUE)
View(decreasingMeanALL)
decreasingMeanALL <- desc(abs(meanALL))
# Finding the three genes with largest mean expression for ALL and ALL patients
decreasingMeanALL <- order(abs(meanALL), decreasing = TRUE)
View(decreasingMeanALL)
max(decreasingMeanALL)
View(decreasingMeanALL)
# Finding average experession for ALL and ALL patients
meanALL <- apply(golub[,gol.fac == "ALL"], 1, mean)
head(meanALL)
sort(meanALL, decreasing = TRUE)
# Finding the three genes with largest mean expression for ALL and ALL patients
decreasingMeanALL <- sort(meanALL, decreasing = TRUE)
View(decreasingMeanALL)
decreasingMeanALL[1:3]
decreasingMeanAML <- sort(meanAML, decreasing = TRUE
decreasingMeanAML <- sort(meanAML, decreasing = TRUE)
decreasingMeanAML <- sort(meanAML, decreasing = TRUE)
decreasingMeanAML[1:3]
library(multtest)
# Load necessary packages
library(BiocManager)
View(golub.gnames)
# Finding average experession for ALL and ALL patients
meanALL <- apply(golub[,gol.fac == "ALL"], 1, mean)
# Finding the three genes with largest mean expression for ALL and ALL patients
df(sort(meanALL), decreasing = TRUE, index.return = TRUE)
# Finding the three genes with largest mean expression for ALL and ALL patients
df(sort(meanALL), decreasing = TRUE, index.return = TRUE))
# Finding the three genes with largest mean expression for ALL and ALL patients
as.data.frame(meanALL)
View(meanALL)
is.data.frame(meanALL)
# Finding the three genes with largest mean expression for ALL and ALL patients
as.data.frame(meanALL)
is.data.frame(meanALL)
# Finding the three genes with largest mean expression for ALL and ALL patients
decreasingMeanALL <- order(meanALL, decreasing = TRUE)
decreasingMeanALL[1:3]
decreasingMeanAML <- order(meanAML, decreasing = TRUE)
decreasingMeanAML[1:3]
golub.gnames[decreasingMeanALL[1:3]]
golub.gnames[decreasingMeanALL[1]
golub.gnames[decreasingMeanALL[1]]
golub.gnames[decreasingMeanALL[1]]
decreasingMeanALL[1:3]
golub.gnames[decreasingMeanALL[1]]
print(golub.gnames[decreasingMeanALL[1]])
decreasingMeanALL[1]
decreasingMeanALL[1:3]
print(golub.gnames[decreasingMeanALL[1]])
print(golub.gnames$V1[decreasingMeanALL[1]])
is.data.frame(golub.gnames)
as.data.frame(golub.gnames)
print(golub.gnames$V1[decreasingMeanALL[1]])
golub.gnames$V!
golub.gnames$V1
print([decreasingMeanALL[1]])
print(golub.gnames[decreasingMeanALL[1]])
print(golub.gnames[decreasingMeanALL[1],2])
print(golub.gnames[2,decreasingMeanALL[1]])
golub.gnames[2,]
golub.gnames[2,1]
print(golub.gnames[,decreasingMeanALL[1]])
golub.gnames[,2784]
2
golub.gnames[2,2784]
golub.gnames[,2784]
golub.gnames[2784,2]
is.matrix(golub.gnames)
as.data.frame(golub.gnames)
is.data.frame(golub.gnames)
as.data.frame(t(golub.gnames))
is.matrix(golub.gnames)
View(golub.gnames)
is.matrix(golub.gnames)
print(golub.gnames[,decreasingMeanALL[1]])
print(golub.gnames[,decreasingMeanALL[1]])
print(golub.gnames[decreasingMeanALL[1]])
is.matrix(golub.gnames)
print(golub.gnames[decreasingMeanALL[1],2])
golub.gnames[2784,2]
golub.gnames$V2[2784,2]
golub.gnames[2784,2]
?apply
fiveAML <- golub[,gol.fac == "AML"]
fiveAML
fiveAML <- golub[1:5,gol.fac == "AML"]
fiveAML
View(fiveAML)
write.csv(fiveAML)
write.table(fiveAML, "fiveAML.csv")
as.data.frame(fiveAML)
write.table(fiveAML, "fiveAML.csv")
as.data.frame(fiveAML)
fiveAML <- as.data.frame(fiveAML)
write.table(fiveAML, "fiveAML.csv")
fiveAML <- data.frame((golub[1:5),(gol.fac == "AML"])
fiveAML <- data.frame((golub[1:5),(gol.fac == "AML"]))
write.table(fiveAML, "fiveAML.csv")
fiveAML <- golub[1:5,gol.fac == "AML"]
fiveAML <- data.frame(fiveAML)
View(fiveAML)
write.table(fiveAML, "fiveAML.csv")
write.csv(fiveAML, "fiveAML.csv")
write.csv(fiveAML, "fiveAML.csv",row.names = 1:5)
fiveAML <- golub[1:5,gol.fac == "AML"]
fiveAML <- data.frame(fiveAML)
View(fiveAML)
View(fiveAML)
write.csv(fiveAML, "fiveAML.csv",row.names = 1:5, name = c(1:11))
write.table(fiveAML, "fiveAML.csv",col.names = 1:11)
write.table(fiveAML, "fiveAML.csv",col.names = FALSE)
View(fiveAML)
write.table(fiveAML, "fiveAML.csv")
write.table(fiveAML, "fiveAML.csv",row.names = F)
write.table(fiveAML, "fiveAML.csv")
write.csv2(fiveAML, "fiveAML.csv")
.table
write.table(fiveAML, "fiveAML.csv")
fiveAML <- golub[1:5,gol.fac == "AML"]
fiveAML <- data.frame(fiveAML)
fiveALL <- golub[1:5,gol.fac == "ALL"]
fiveALL <- data.frame(fiveALL)
View(fiveALL)
fiveALL <- golub[1:5,gol.fac == "ALL"]
fiveALL <- data.frame(fiveALL)
write.table(fiveALL, "ALL5.txt")
100:200
100:201
100:20
100:200
View(golub)
golub[1]
golub[100:200,]
golub[100:200,1]
sdGene <- (golub[100:200,1])
sdGene <- sd(golub[100:200,1])
sdGenes <- sd(golub[100:200,1])
sdAll <- sd(golub)
sdGenes <- sd(golub[1,])
sdGenes <- sd(golub[100:200,1])
sdGenes <- sd(golub[100:200,1])
sdAll <- sd(golub[1,])
sdAll <- sd(golub[,])
sdAll <- sd(golub[1,])
sdAll <- rowSds(golub)
sdAll <- sd(golub[1,])
sdAll <- apply(golub,1,sd)
sdALL
sdAll
View(sdAll)
?apply
sdOne <- sdAll[,1] > 1
sdOne <- sdAll[,2] > 1
sdOne <- which(sdAll > 1)
View(sdOne)
sdOne <- which(sdAll[,1] > 1)
sdOne <- which(sdAll[,2] > 1)
sdAll[1]
sdOne <- which(sdAll[,] > 1)
sdOne <- which(sdAll[] > 1)
View(sdOne)
sdOne <- subset(sdAll, V1 > 1)
sdOne <- subset(sdAll, > 1)
sdOne <- subset(sdAll > 1)
sdAll <- data.frame(sdAll)
sdOne <- subset(sdAll, sdAll > 1)
View(sdOne)
count(sdOne)
count(sdOne)
count(sdOne, vars = NULL, wt_var = NULL))
nrow(sdOne)
golub[102]
golub[102,]
X1 <- golub[101,]
X2 <- golub[102,]
library(ALL)
data(ALL)
data(trees)
str(trees)
plot(X1,X2)
?plot
plot(X1,X2, xlab = )
plot(X1,X2, xlab = "Expression Values", ylab = "Genes" )
install.packages(ggplot2)
install.packages(ggplot2)
install.packages(ggplot)
install.packages("ggplot2")
library(ggplot2)
qplot("Expression Values", "Gene 1", data = X1) + geom_point(data=X2,colour="red")
X1 <- data.frame(X1)
X2 <- data.frame(X2)
qplot("Expression Values", "Gene 1", data = X1) + geom_point(data=X2,colour="red")
qplot("Expression Values", "Gene 1", data = X1) + geom_point(data=X2,colour="red") +xlim(0,10)
X1 <- golub[101,]
X2 <- golub[102,]
plot(X1,X2, xlab = "Expression Values", ylab = "Genes" )
golub.gnames[101]
golub.gnames[102]
golub.gnames[101,2]
golub.gnames[102,2]
plot(X1,X2, xlab = "NUCLEAR PORE COMPLEX PROTEIN NUP214", ylab = "PHOSPHATIDYLSERINE SYNTHASE I" )
plot(X1,X2, xlab = "NUCLEAR PORE COMPLEX PROTEIN NUP214", ylab = "PHOSPHATIDYLSERINE SYNTHASE I", main = "Scatter Plot of Gene 101 Expression VS. Gene 102" )
plot(X1,X2, xlab = "NUCLEAR PORE COMPLEX PROTEIN NUP214 (GENE 101)", ylab = "PHOSPHATIDYLSERINE SYNTHASE I (GENE 102)", main = "SCATTER PLOT OF GENE 101 EXPRESSION VS. GENE 102" )
plot(X1,X2, xlab = "NUCLEAR PORE COMPLEX PROTEIN NUP214(GENE 101)", ylab = "PHOSPHATIDYLSERINE SYNTHASE I(GENE 102)", main = "SCATTER PLOT OF GENE 101 EXPRESSION VS. GENE 102" )
View(trees)
tress$Girth
trees$Girth
plot(trees$Girth,trees$Volume)
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume")
?points
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume") + points(trees$Girth,trees$Height)
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = (0,200)) + points(trees$Girth,trees$Height,)
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = (0,200)) + points(trees$Girth,trees$Height,)
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = (0,200)) + points(trees$Girth,trees$Height)
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = (0,200))
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = (200))
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = 200) + points(trees$Girth,trees$Height)
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,250)) + points(trees$Girth,trees$Height)
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,120)) + points(trees$Girth,trees$Height)
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,120)) + points(trees$Girth,trees$Height, "square")
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,120)) + points(trees$Girth,trees$Height, "circle")
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,120)) + points(trees$Girth,trees$Height, "0")
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,120)) + points(trees$Girth,trees$Height, "plus")
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,120)) + points(trees$Girth,trees$Height, pch = 3)
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,120)) + points(trees$Girth,trees$Height, pch = 3, colour = "blue")
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,120)) + points(trees$Girth,trees$Height, pch = 3, col = "blue")
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume", ylim = c(0,120), pch = 1, col = "red") + points(trees$Girth,trees$Height, pch = 3, col = "blue")
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume(Red) or Height(Blue)", ylim = c(0,120), pch = 1, col = "red") + points(trees$Girth,trees$Height, pch = 3, col = "blue")
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume(Red) or Height(Blue)", ylim = c(0,110), pch = 1, col = "red") + points(trees$Girth,trees$Height, pch = 3, col = "blue")
plot(trees$Girth,trees$Volume, xlab = "Girth", ylab = "Volume(Red) or Height(Blue)", main = "Plot of Girth VS. Volume or Height for trees Data Set", ylim = c(0,110), pch = 1, col = "red") + points(trees$Girth,trees$Height, pch = 3, col = "blue")
type(trees)
typeof(trees)
BiocManager:ALL
BiocManager:install("ALL")
# Load necessary packages
library(BiocManager)
library(multtest)
BiocManager:install("ALL")
# Load necessary packages
library(BiocManager)
BiocManager:install("ALL")
BiocManager:install("multtest")
install.packages("ALL")
BiocLite:install("multtest")
BiocManager:install("multtest")
BiocManager:install("ALL")
install.packages("ALL")
library(ALL)
BiocManager:install("ALL")
# Load necessary packages
library(BiocManager)
library(multtest)
BiocManager:install("ALL")
BiocManager:install("ALL")
if (!requireNamespace("BiocManager", quietly = TRUE))
BiocManager::install("ALL")
data(ALL)
library(ALL)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ALL")
library(ALL)
data(ALL)
exprs(ALL[,ALL$BT=="B1"]
library(ALL)
# Loading necessary packages and data
library(ALL)
data(ALL)
exprs(ALL[,ALL$BT=="B1"]
B1 <- exprs(ALL[,ALL$BT=="B1"]
B1 <- exprs(ALL[,ALL$BT=="B1"]
B1 <- exprs(ALL[,ALL$BT=="B1"])
B1 <- exprs(ALL[,ALL$BT=="B1"])
?hist
hist(B1)
# Finding the three genes with largest mean expression for ALL and ALL patients, Order function gives index of largest values
decreasingMeanALL <- order(meanALL, decreasing = TRUE)
decreasingMeanALL[1:3]
print(golub.gnames[decreasingMeanALL[1],2])
View(golub.gnames)
decreasingMeanALL[1:3]
decreasingMeanALL[1:3]
print(golub.gnames[decreasingMeanALL[1:3],2])
print(golub.gnames[decreasingMeanAML[1:3],2])
View(B1)
hist(B1, main = "Gene Expression of patients in disease stage B1", xlab = "Patient")
apply(B1, 1, mean)
write.csv2(fiveAML, "AML5.csv")
table
write.table(fiveAML, "AML5.csv")
write.csv(fiveAML, "AML5.csv", sep = ",")
write.table(fiveALL, "ALL5.txt", sep = ",")
View(B1)
meanB1 <- apply(B1, 1, mean)
header(meanB1)
head(meanB1)
?apply
decreasingMeanB1 <- order(meanB1, decreasing = TRUE)
decreasingMeanB1 <- sort(meanB1, decreasing = TRUE)
decreasingMeanB1 <- order(meanB1, decreasing = TRUE)
decreasingMeanB1[1:3]
decreasingMeanB1[1:3]
B1[1979]
B1[1979,0]
B1[1979,1]
decreasingMeanB1[1:3]
B1[0,0
B1[0,0]
B1[0,0]
B1[0,1]
B1[0,2]
B1[1,2]
B1[decreasingMeanB1[1:3],]
identifiers <- B1[decreasingMeanB1[1:3],]
identifiers
identifiers[0]
identifiers[1,1]
identifiers <- row.names(identifiers)
identifiers
# Load necessary packages
library(BiocManager)
library(multtest)
# Load necessary packages
library(BiocManager)
library(multtest)
head(meanALL)
head(meanAML)
# typeof() function outputs the data type of trees
?typeof
typeof(trees)
a)
```{r Part 3a, echo = FALSE}
# Loading data and extracting gene expressions in B1 patients to plot in gistogram
data(ALL)
B1 <- exprs(ALL[,ALL$BT=="B1"])
hist(B1, main = "Gene Expression of patients in disease stage B1", xlab = "Patient")
```
b)
```{r Part 3b, echo = FALSE}
meanB1 <- apply(B1, 1, mean)
head(meanB1)
```
* See code for all values
c)
```{r Part 3c, echo = FALSE}
decreasingMeanB1 <- order(meanB1, decreasing = TRUE)
identifiers <- B1[decreasingMeanB1[1:3],]
identifiers <- row.names(identifiers)
print(identifiers)
```
rm(list = ls())
Question 4.
